{"version":3,"sources":["App/components/Header.js","App/Automaton/categories/charConst.js","App/components/CardResult.js","App/components/Form.js","App/Automaton/automaton.js","App/Automaton/categories/separator.js","App/Automaton/categories/operator.js","App/Automaton/categories/numConst.js","App/Automaton/categories/identify.js","App/Automaton/categories/keyword.js","App/pages/home.js","App/index.js","index.js"],"names":["header","onSelect","activeKey","props","Header","Navbar","style","padding","Body","isCharConst","word","test","trim","CardResult","tokens","tags","key","tag","Tag","localeCompare","color","paddingTop","Panel","bordered","List","size","hover","map","item","index","Item","panelStyle","width","FormSirio","useState","card","setCard","textArea","setTextArea","Form","fluid","FormGroup","ControlLabel","value","setValue","height","language","inlineNumbers","borderRadius","ButtonToolbar","Button","appearance","onClick","text","textArray","split","textArrayCharConst","i","length","concat","push","forEach","expr","replaceAll","regex","RegExp","charAt","join","match","listaTokens","array","isOperator","acceptation","estate","symbol","isNumConst","isIdentifier","isKeyword","automaton","Home","Container","Content","maxWidth","display","alignItems","justifyContent","Col","Row","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f587b7f0.chunk.js","sourcesContent":["import {\r\n    Header,\r\n    Navbar\r\n} from 'rsuite';\r\n\r\nfunction header({onSelect, activeKey, ...props}) {\r\n\r\n    const logoStyle = {\r\n        padding: \"20px\",\r\n    };\r\n\r\n    return (\r\n        <Header>\r\n            <Navbar {...props}>\r\n                <Navbar.Header>\r\n                    <div style={logoStyle}>\r\n                        SIRIO\r\n                    </div>\r\n                </Navbar.Header>\r\n                <Navbar.Body>\r\n                </Navbar.Body>\r\n            </Navbar>\r\n        </Header>\r\n    );\r\n}\r\n\r\nexport default header;\r\n\r\n\r\n\r\n","export default function isCharConst(word) {\r\n    let acceptation\r\n    const regex = /([\"'])((?:(?=(?:\\\\)*)\\\\.|.)*?)\\1/gm\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","import {\r\n    Panel,\r\n    List,\r\n    Tag\r\n} from 'rsuite';\r\n\r\nfunction CardResult({tokens, onSelect, activeKey, ...props}) {\r\n    //css\r\n    const panelStyle = {\r\n        paddingTop: \"5%\"\r\n    }\r\n\r\n    function tags(key) {\r\n        let tag = <Tag>No encontrado</Tag>\r\n\r\n        if (0 === key.localeCompare(\"Cadena de texto\")) {\r\n            tag = <Tag color=\"orange\">Cadena de texto</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Palabra reservada\")) {\r\n            tag = <Tag color=\"blue\">Palabra reservadas</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Identificador\")) {\r\n            tag = <Tag color=\"green\">Identificador</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Constante Numerica\")) {\r\n            tag = <Tag color=\"violet\">Constante Numerica</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Operador\")) {\r\n            tag = <Tag color=\"cyan\">Operador</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Separador\")) {\r\n            tag = <Tag color=\"red\">Separador</Tag>\r\n        }\r\n\r\n        return tag\r\n    }\r\n\r\n    return (\r\n        <div style={panelStyle}>\r\n            <Panel bordered>\r\n                <List size=\"sm\" hover>\r\n                    {tokens.map((item, index) => (\r\n                        <List.Item key={item['key']} index={index}>\r\n                            {tags(item['key'])} &nbsp;&nbsp;&nbsp; {item['value']}\r\n                        </List.Item>\r\n                    ))}\r\n                </List>\r\n            </Panel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardResult;\r\n","import React, {useState} from 'react';\r\nimport automaton from \"../Automaton/automaton\";\r\nimport CardResult from './CardResult';\r\nimport {CodeEditorEditable} from 'react-code-editor-editable'\r\nimport 'highlight.js/styles/atom-one-light.css';\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    ControlLabel,\r\n    Button,\r\n    ButtonToolbar,\r\n    Panel\r\n} from 'rsuite';\r\n\r\nconst panelStyle = {\r\n    /* Extra small devices (phones, 600px and down) */\r\n    width:\"60rem\"\r\n}\r\n\r\n\r\nfunction FormSirio({onSelect, activeKey, ...props}) {\r\n    const [card, setCard] = useState();\r\n    const [textArea, setTextArea] = useState(\"void main() {\\n  print('Hello, World!');\\n}\");\r\n    function showCard() {\r\n        if (0 !== textArea.trim().localeCompare(\"\")) {\r\n\r\n            let tokens = []\r\n            tokens = automaton(textArea.trim())\r\n            setCard(\r\n                <CardResult\r\n                    tokens={tokens}\r\n                />\r\n            )\r\n        } else {\r\n            setCard()\r\n        }\r\n    }\r\n\r\n    function clear() {\r\n        setTextArea(\"\")\r\n        setCard()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Panel header=\"Analizador lexico\" bordered style={panelStyle}>\r\n                <p/>\r\n                <Form fluid>\r\n                    <FormGroup>\r\n                        <ControlLabel>Código Dart</ControlLabel>\r\n                        <CodeEditorEditable\r\n                            value={textArea}\r\n                            setValue={setTextArea}\r\n                            width='100%'\r\n                            height='45vh'\r\n                            language='dart'\r\n                            inlineNumbers\r\n                            borderRadius=\"8px\"\r\n                        />\r\n\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <ButtonToolbar>\r\n                            <Button appearance=\"default\" color=\"green\" onClick={showCard}>Analizar</Button>\r\n                            <Button appearance=\"default\" onClick={clear}>Limpiar</Button>\r\n                        </ButtonToolbar>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Panel>\r\n            {card}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormSirio;\r\n","/* eslint-disable no-useless-escape */\r\nimport isCharConst from \"./categories/charConst\";\r\nimport isIdentifier from \"./categories/identify\";\r\nimport isKeyword from \"./categories/keyword\";\r\nimport isNumConst from \"./categories/numConst\";\r\nimport isOperator from \"./categories/operator\";\r\nimport isSeparator from \"./categories/separator\";\r\n\r\nexport default function automaton2(text) {\r\n\r\n    let textArray = text.split(/(?:([\"'])((?:(?=(?:\\\\)*)\\\\.|.)*?)\\1)/gm)\r\n    let textArrayCharConst = []\r\n    for (let i = 0; i < textArray.length; i) {\r\n        let value = textArray[i]\r\n        if (0 === value.localeCompare(\"\\\"\")) {\r\n            value = \"\\\"\".concat(textArray[i + 1], \"\\\"\")\r\n            i++\r\n        } else if (0 === value.localeCompare(\"\\'\")) {\r\n            value = \"\\'\".concat(textArray[i + 1], \"\\'\")\r\n            i++\r\n        }\r\n        textArrayCharConst.push(value)\r\n        i++\r\n    }\r\n\r\n    textArrayCharConst.forEach(function (value, index) {\r\n            let expr = textArrayCharConst[index];\r\n            if (!isCharConst(value)) {\r\n                //Se eliminan saltos de linea y tabulaciones\r\n                expr = expr.replaceAll(/\\n/g, \" \")\r\n                expr = expr.replaceAll(/\\t/g, \" \")\r\n\r\n                //Se aislan primero los signos que pueden generar cadenas de texto añadiendoles espacios.\r\n                expr = expr.replaceAll(/\"/g, ' \" ')\r\n                expr = expr.replaceAll(/'/g, \" ' \")\r\n\r\n                //se aislan los delimitadores o separadores\r\n                const separatorsList = [\"\\(\", \"\\)\", \"\\[\", \"\\]\", \"\\{\", \"\\}\", \";\", \",\", \":\", \"\\.{3}\"]\r\n                separatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value, \" \"))\r\n                })\r\n\r\n                //Se aislan los operadores + - * / % < > = ! & | ^ ~  ?\r\n                const operatorsList = [\"\\+\", \"-\", \"\\*\", \"\\/\", \"%\", \"<\", \">\", \"=\", \"!\", \"&\", \"\\|\", \"\\^\", \"~\", \"\\?\", \"\\.\"]\r\n                operatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value, \" \"))\r\n                })\r\n\r\n                //Se reagrupa el \".\" si esta entre numeros\r\n                expr = expr.replaceAll(/\\d \\. \\d/g, \".\")\r\n\r\n                //Se reagrupan los operadores compuestos triples\r\n                const tripleOperatorsList = [\"\\<\\<\\=\", \"\\>\\>\\=\", \"\\~\\/\\=]\"]\r\n                tripleOperatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value.charAt(0), \"\\\\s\\\\s\", \"\\\\\", value.charAt(1), \"\\\\s\\\\s\", \"\\\\\", value.charAt(2)), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value.charAt(0), value.charAt(1), value.charAt(2), \" \"))\r\n                })\r\n\r\n                //Se reagrupan los operadores compuestos dobles\r\n                const dobleOperatorsList = [\"\\+\\+\", \"–\\=\", \"\\/\\=\", \"\\%\\=\", \"\\^\\=\", \"\\+\\=\", \"\\*\\=\", \"\\&\\=\", \"\\|\\=\",\r\n                    \"\\|\\|\", \"\\&\\&\", \"\\+\\+\", \"\\-\\-\", \"\\<\\<\", \"\\>\\>\", \"\\=\\=\", \"\\!\\=\", \"\\>\\=\", \"\\<\\=\", \"\\~\\/\", \"\\?\\?\", \"\\?\\.\"]\r\n                dobleOperatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value.charAt(0), \"\\\\s\\\\s\", \"\\\\\", value.charAt(1)), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value.charAt(0), value.charAt(1), \" \"))\r\n                })\r\n            }\r\n            textArrayCharConst[index] = expr;\r\n        }\r\n    )\r\n    text = textArrayCharConst.join(\" \");\r\n    //Se eliminan espacios dobles\r\n    text = text.trim();\r\n    text = text.replaceAll(/\\s{2,}/g, \" \");\r\n\r\n    //Se separa el texto por espacios simples\r\n    text = text.match(/[^\\s\"']+|(?:([\"'])((?:(?=(?:\\\\)*)\\\\.|.)*?)\\1)/g);\r\n\r\n    //Se tokeniza cada elemento de la lista text y se guarda en un array de tokens.\r\n    let listaTokens = [];\r\n    text.forEach(tokenizar);\r\n\r\n    function tokenizar(value, index, array) {\r\n        let key = \"No encontrado\"\r\n\r\n        if (isSeparator(value)) {\r\n            key = \"Separador\"\r\n        }\r\n        if (isOperator(value)) {\r\n            key = \"Operador\"\r\n        }\r\n        if (isNumConst(value)) {\r\n            key = \"Constante Numerica\"\r\n        }\r\n        if (isIdentifier(value)) {\r\n            key = \"Identificador\"\r\n        }\r\n        if (isKeyword(value)) {\r\n            key = \"Palabra reservada\"\r\n        }\r\n        if (isCharConst(value)) {\r\n            key = \"Cadena de texto\"\r\n        }\r\n\r\n        listaTokens.push({key: key, value: value})\r\n    }\r\n\r\n    return listaTokens\r\n}\r\n\r\n","export default function isSeparator(word) {\r\n    let acceptation\r\n    const regex = /(?:\\[|]|\\(|\\)|{|}|,|;|:|\\.{3})/g\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","export default function isOperator(word) {\r\n    let acceptation\r\n    const regex = /(?:<<=|>>=|~\\/=|–=|\\/=|%=|\\^=|\\+=|\\*=|&=|\\|=|\\|\\||&&|\\+\\+|--|<<|>>|==|!=|>=|<=|\\?\\?|\\?\\.|~\\/|!|&|\\||\\^|=|>|<|\\+|–|\\*|\\/|%|~|\\?|\\.)/g\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","export default function isNumConst(word) {\r\n    let estate = 0\r\n    let acceptation\r\n    word = word.split(\"\");\r\n    word.forEach(automaton);\r\n\r\n    function automaton(value, index, array) {\r\n        let symbol;\r\n        switch (value) {\r\n            case \"0\":\r\n            case \"1\":\r\n            case \"2\":\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n            case \"6\":\r\n            case \"7\":\r\n            case \"8\":\r\n            case \"9\":\r\n                symbol = \"d\"\r\n                break;\r\n            case \".\":\r\n                symbol = \".\"\r\n                break;\r\n            case\"e\":\r\n            case \"E\":\r\n                symbol = \"E\"\r\n                break;\r\n            case \"-\":\r\n                symbol = \"s\"\r\n                break;\r\n            default:\r\n                symbol = \"x\"\r\n                estate = 9\r\n                acceptation = false\r\n        }\r\n\r\n        switch (estate) {\r\n            case 0:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 2\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 8\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 1\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n\r\n                break;\r\n            case 1:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 2\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 8\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n\r\n                break;\r\n            case 2:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 2\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 34\r\n                        acceptation = true\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 5\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 34:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 34\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 5\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 5:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 7\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 6\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 6:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 7\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 7:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 7\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 8:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 34\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n\r\n                break;\r\n            case 9:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    return acceptation;\r\n}\r\n","export default function isIdentifier(word) {\r\n    let acceptation\r\n    const regex = /^([a-zA-Z_$][a-zA-Z\\\\d_$]*)$/\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","export default function isKeyword(word) {\r\n    let acceptation\r\n    const regex = /\\b(?:abstract|else|import|super|as|enum|in|switch|assert|export|interface|sync|async|extends|is|this|await|extensioyarn n|library|throw|break|external|mixin|true|case|factory|new|try|catch|false|null|typedef|class|final|on|var|const|finally|operator|void|continue|For|part|while|covarient|Function|rethrow|with|default|get|return|yield|deffered|hide|set|do|if|show|dynamic|implements|static)\\b/\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","import {\r\n    Container,\r\n    Content,\r\n    Row,\r\n    Col\r\n} from 'rsuite';\r\nimport Header from \"../components/Header\"\r\nimport Form from \"../components/Form\"\r\n\r\n\r\nfunction Home({ onSelect, activeKey, ...props }) {\r\n\r\n    const containerStyle = {\r\n        height: \"100%\",\r\n        maxWidth: \"100%\",\r\n        display:   \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        padding: \"5%\"\r\n    };\r\n\r\n    return (\r\n\r\n        <Container>\r\n            <Header />\r\n            <Content style={containerStyle}>\r\n                <Col>\r\n                    <Row>\r\n                        <Form/>\r\n                    </Row>\r\n                </Col>\r\n            </Content>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import Home from './pages/home'\r\n\r\nfunction App() {\r\n    return (\r\n            <Home/>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'rsuite/dist/styles/rsuite-default.css'; \nimport App from './App/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}